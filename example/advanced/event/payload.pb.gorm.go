// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: event/payload.proto

/*
Package event is a generated protocol buffer package.

It is generated from these files:
	event/payload.proto

It has these top-level messages:
	Bet
	Selection
*/
package event

import context "context"
import fmt "fmt"
import strings "strings"
import time "time"

import errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
import field_mask1 "google.golang.org/genproto/protobuf/field_mask"
import go_uuid1 "github.com/satori/go.uuid"
import gorm1 "github.com/jinzhu/gorm"
import gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
import ptypes1 "github.com/golang/protobuf/ptypes"
import types1 "github.com/infobloxopen/protoc-gen-gorm/types"

import math "math"
import _ "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type BetORM struct {
	CreateTime   *time.Time
	CustomerUuid string
	Id           *go_uuid1.UUID
	Odds         string
	Selections   []*SelectionORM `gorm:"foreignkey:BetId;association_foreignkey:Id"`
}

// TableName overrides the default tablename generated by GORM
func (BetORM) TableName() string {
	return "bets"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Bet) ToORM(ctx context.Context) (BetORM, error) {
	to := BetORM{}
	var err error
	if prehook, ok := interface{}(m).(BetWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		tempUUID, uErr := go_uuid1.FromString(m.Id.Value)
		if uErr != nil {
			return to, uErr
		}
		to.Id = &tempUUID
	}
	if m.CreateTime != nil {
		var t time.Time
		if t, err = ptypes1.Timestamp(m.CreateTime); err != nil {
			return to, err
		}
		to.CreateTime = &t
	}
	to.CustomerUuid = m.CustomerUuid
	for _, v := range m.Selections {
		if v != nil {
			if tempSelections, cErr := v.ToORM(ctx); cErr == nil {
				to.Selections = append(to.Selections, &tempSelections)
			} else {
				return to, cErr
			}
		} else {
			to.Selections = append(to.Selections, nil)
		}
	}
	to.Odds = m.Odds
	if posthook, ok := interface{}(m).(BetWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *BetORM) ToPB(ctx context.Context) (Bet, error) {
	to := Bet{}
	var err error
	if prehook, ok := interface{}(m).(BetWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	if m.Id != nil {
		to.Id = &types1.UUIDValue{Value: m.Id.String()}
	}
	if m.CreateTime != nil {
		if to.CreateTime, err = ptypes1.TimestampProto(*m.CreateTime); err != nil {
			return to, err
		}
	}
	to.CustomerUuid = m.CustomerUuid
	for _, v := range m.Selections {
		if v != nil {
			if tempSelections, cErr := v.ToPB(ctx); cErr == nil {
				to.Selections = append(to.Selections, &tempSelections)
			} else {
				return to, cErr
			}
		} else {
			to.Selections = append(to.Selections, nil)
		}
	}
	to.Odds = m.Odds
	if posthook, ok := interface{}(m).(BetWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Bet the arg will be the target, the caller the one being converted from

// BetBeforeToORM called before default ToORM code
type BetWithBeforeToORM interface {
	BeforeToORM(context.Context, *BetORM) error
}

// BetAfterToORM called after default ToORM code
type BetWithAfterToORM interface {
	AfterToORM(context.Context, *BetORM) error
}

// BetBeforeToPB called before default ToPB code
type BetWithBeforeToPB interface {
	BeforeToPB(context.Context, *Bet) error
}

// BetAfterToPB called after default ToPB code
type BetWithAfterToPB interface {
	AfterToPB(context.Context, *Bet) error
}

type SelectionORM struct {
	BetId  *go_uuid1.UUID
	GameId uint64
	Market string
	Odds   string
}

// TableName overrides the default tablename generated by GORM
func (SelectionORM) TableName() string {
	return "selections"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Selection) ToORM(ctx context.Context) (SelectionORM, error) {
	to := SelectionORM{}
	var err error
	if prehook, ok := interface{}(m).(SelectionWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.GameId = m.GameId
	to.Market = m.Market
	to.Odds = m.Odds
	if posthook, ok := interface{}(m).(SelectionWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *SelectionORM) ToPB(ctx context.Context) (Selection, error) {
	to := Selection{}
	var err error
	if prehook, ok := interface{}(m).(SelectionWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.GameId = m.GameId
	to.Market = m.Market
	to.Odds = m.Odds
	if posthook, ok := interface{}(m).(SelectionWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Selection the arg will be the target, the caller the one being converted from

// SelectionBeforeToORM called before default ToORM code
type SelectionWithBeforeToORM interface {
	BeforeToORM(context.Context, *SelectionORM) error
}

// SelectionAfterToORM called after default ToORM code
type SelectionWithAfterToORM interface {
	AfterToORM(context.Context, *SelectionORM) error
}

// SelectionBeforeToPB called before default ToPB code
type SelectionWithBeforeToPB interface {
	BeforeToPB(context.Context, *Selection) error
}

// SelectionAfterToPB called after default ToPB code
type SelectionWithAfterToPB interface {
	AfterToPB(context.Context, *Selection) error
}

// DefaultCreateBet executes a basic gorm create call
func DefaultCreateBet(ctx context.Context, in *Bet, db *gorm1.DB) (*Bet, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BetORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BetORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type BetORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BetORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadBet executes a basic gorm read call
func DefaultReadBet(ctx context.Context, in *Bet, db *gorm1.DB) (*Bet, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == nil || *ormObj.Id == go_uuid1.Nil {
		return nil, errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(BetORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &BetORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BetORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := BetORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(BetORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type BetORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BetORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BetORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteBet(ctx context.Context, in *Bet, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == nil || *ormObj.Id == go_uuid1.Nil {
		return errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(BetORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&BetORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(BetORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type BetORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BetORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteBetSet(ctx context.Context, in []*Bet, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	var err error
	keys := []*go_uuid1.UUID{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == nil || *ormObj.Id == go_uuid1.Nil {
			return errors1.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&BetORM{})).(BetORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&BetORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&BetORM{})).(BetORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type BetORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Bet, *gorm1.DB) (*gorm1.DB, error)
}
type BetORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Bet, *gorm1.DB) error
}

// DefaultStrictUpdateBet clears first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateBet(ctx context.Context, in *Bet, db *gorm1.DB) (*Bet, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateBet")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &BetORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(BetORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterSelections := SelectionORM{}
	if ormObj.Id == nil || *ormObj.Id == go_uuid1.Nil {
		return nil, errors1.EmptyIdError
	}
	filterSelections.BetId = new(go_uuid1.UUID)
	*filterSelections.BetId = *ormObj.Id
	if err = db.Where(filterSelections).Delete(SelectionORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BetORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BetORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type BetORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BetORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BetORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchBet executes a basic gorm update call with patch behavior
func DefaultPatchBet(ctx context.Context, in *Bet, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*Bet, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	var pbObj Bet
	var err error
	if hook, ok := interface{}(&pbObj).(BetWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadBet(ctx, &Bet{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(BetWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskBet(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(BetWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateBet(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(BetWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type BetWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Bet, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type BetWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Bet, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type BetWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Bet, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type BetWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Bet, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultPatchSetBet executes a bulk gorm update call with patch behavior
func DefaultPatchSetBet(ctx context.Context, objects []*Bet, updateMasks []*field_mask1.FieldMask, db *gorm1.DB) ([]*Bet, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors1.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Bet, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchBet(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskBet patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskBet(ctx context.Context, patchee *Bet, patcher *Bet, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Bet, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	var updatedStake bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"CreateTime" {
			patchee.CreateTime = patcher.CreateTime
			continue
		}
		if f == prefix+"CustomerUuid" {
			patchee.CustomerUuid = patcher.CustomerUuid
			continue
		}
		if !updatedStake && strings.HasPrefix(f, prefix+"Stake.") {
			if patcher.Stake == nil {
				patchee.Stake = nil
				continue
			}
			if patchee.Stake == nil {
				patchee.Stake = &Bet_Stake{}
			}
			childMask := &field_mask1.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"Stake."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm2.MergeWithMask(patcher.Stake, patchee.Stake, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"Stake" {
			updatedStake = true
			patchee.Stake = patcher.Stake
			continue
		}
		if f == prefix+"Selections" {
			patchee.Selections = patcher.Selections
			continue
		}
		if f == prefix+"Odds" {
			patchee.Odds = patcher.Odds
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListBet executes a gorm list call
func DefaultListBet(ctx context.Context, db *gorm1.DB) ([]*Bet, error) {
	in := Bet{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BetORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &BetORM{}, &Bet{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BetORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []BetORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(BetORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Bet{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type BetORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BetORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type BetORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]BetORM) error
}

// DefaultCreateSelection executes a basic gorm create call
func DefaultCreateSelection(ctx context.Context, in *Selection, db *gorm1.DB) (*Selection, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SelectionORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SelectionORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type SelectionORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type SelectionORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultApplyFieldMaskSelection patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskSelection(ctx context.Context, patchee *Selection, patcher *Selection, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*Selection, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"GameId" {
			patchee.GameId = patcher.GameId
			continue
		}
		if f == prefix+"Market" {
			patchee.Market = patcher.Market
			continue
		}
		if f == prefix+"Odds" {
			patchee.Odds = patcher.Odds
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListSelection executes a gorm list call
func DefaultListSelection(ctx context.Context, db *gorm1.DB) ([]*Selection, error) {
	in := Selection{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SelectionORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &SelectionORM{}, &Selection{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SelectionORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	ormResponse := []SelectionORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(SelectionORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Selection{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type SelectionORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type SelectionORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type SelectionORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]SelectionORM) error
}
